/* * Homework *//*Skins and Styles*/let buttonSkin = new Skin ({fill: 'green'});let whiteSkin = new Skin ({fill: 'white'});let blueSkin = new Skin ({fill: '#3498db'});let silverSkin = new Skin ({fill: '#bdc3c7'});let buttonStyle = new Style({font: '22px', color: 'white'});let headlineStyle = new Style({font: '28px', color: '#aaaaaa'});let smallStyle = new Style ({font: '20px', color: 'black'});let smallWhiteStyle = new Style ({font: '20px', color: 'white'});// let comicPicUrl = 'http://imgs.xkcd.com/comics/solar_spectrum.png';var url = 'http://xkcd.com/info.0.json';var currentComic=0;var imgObj = new  Picture({height: 50,skin:blueSkin});var apiKey="ec056b70492ea21b397ced4b6d2b93c9"var apiSecret="dad2eab363416e0b"/* Main screen layout */let MainContainer = Column.template($ => ({    left: 0, right: 0, top: 0, bottom: 0, skin: whiteSkin,    contents: [      new LoadButton()      // new ComicPane()    ],}));// let ComicPane = Container.template($ => ({//   name: 'comicPane',//   left: 0, right: 0, top: 0, bottom: 0, skin: silverSkin,//   contents: [////   ]// }));let LoadButton = Container.template($ => ({  left: 0, right: 0, top: 0, bottom: 212.5, skin: blueSkin,  active: true,  contents: [    new Label({      left: 0, right:0, top: 0, bottom: 0,      style: buttonStyle,      string: 'Load Comic'    })  ],  behavior: Behavior({    onTouchEnded(container, id, x, y, ticks) {      getImg(function(comicUrl) {        let comicImg = new Picture({height: 200, url: comicUrl});      });    }  })}));/* Helper function for sending the HTTP request and loading the response */function getImg(uiCallback) {    //random comic number    trace(Math.round(Math.random()*1000)+'\n');    var randomComicNumber = Math.round(Math.random()*1000);    var url = 'http://xkcd.com/info.0.json';
    if (currentComic!=0){
      url="http://xkcd.com/"+randomComicNumber+"/info.0.json"
    }
    let message = new Message(url);
    message.method = "GET";    message.invoke(Message.TEXT).then(text => {      if (0 == message.error && 200 == message.status) {          try {            /*** YOUR CODE HERE ***/            trace("hello" + '\n');
            var obj=JSON.parse(text);
            trace(obj.month + '\n');            let comicPic = new  Picture({height: 150, url: obj.img});            currentComic= obj.num;            imgObj=comicPic;            application.add(comicPic);            let details= new Label({ left: 0, right: 0, top: 200, bottom: 0, string: obj.title, style: smallStyle,skin:whiteSkin})            let leftArrow = new Label({left:0, right:250, top:0, bottom:225, string: "Previous",skin:blueSkin,active:true, style:smallWhiteStyle,                    behavior: Behavior({              onTouchEnded(container, id, x, y, ticks) {                getLeftImg();              }            })})            let rightArrow = new Label({left:250, right:0, top:0, bottom:225, string: "Next",skin:blueSkin,active:true, style:smallWhiteStyle,                    behavior: Behavior({              onTouchEnded(container, id, x, y, ticks) {                getRightImg();              }            })})            application.add(leftArrow);            application.add(rightArrow);            application.add(details);            var searchParams= urlString(obj.title)            trace("title:"+obj.title+'\n');            trace("searchParams:"+searchParams+'\n');            getFlickrImg(searchParams);          }          catch (e) {            throw('Web service responded with invalid JSON!\n');          }      }      else {          trace('Request Failed - Raw Response Body: *'+text+'*'+'\n');      }    });}function getLeftImg() {    if (currentComic!=0){      var previousComic = currentComic-1;      trace(previousComic-1+'\n')      trace("comic number:"+previousComic+'\n')      url="http://xkcd.com/"+previousComic+"/info.0.json"      trace(url+'\n')    }    let message = new Message(url);    message.method = "GET";    message.invoke(Message.TEXT).then(text => {      if (0 == message.error && 200 == message.status) {          try {            /*** YOUR CODE HERE ***/            trace("hello" + '\n');            var obj=JSON.parse(text);            trace(obj.month + '\n');            let comicPic = new  Picture({height: 150, url: obj.img});            currentComic= obj.num;            application.add(comicPic);            let details= new Label({ left: 0, right: 0, top: 200, bottom: 0, string: obj.title, style: smallStyle,skin:whiteSkin})            let leftArrow = new Label({left:0, right:250, top:0, bottom:225, string: "Previous",skin:blueSkin,active:true, style:smallWhiteStyle,                    behavior: Behavior({              onTouchEnded(container, id, x, y, ticks) {                getLeftImg();              }            })})            let rightArrow = new Label({left:250, right:0, top:0, bottom:225, string: "Next",skin:blueSkin,active:true, style:smallWhiteStyle,                    behavior: Behavior({              onTouchEnded(container, id, x, y, ticks) {                getRightImg();              }            })})            application.add(leftArrow);            application.add(rightArrow);            application.add(details);            var searchParams= urlString(obj.title)            getFlickrImg(searchParams);          }          catch (e) {            throw('Web service responded with invalid JSON!\n');          }      }      else {          trace('Request Failed - Raw Response Body: *'+text+'*'+'\n');      }    });}function getRightImg() {    if (currentComic!=0){      var nextComic = currentComic+1;      trace(currentComic+1+'\n')      trace("comic number:"+nextComic+'\n')      url="http://xkcd.com/"+nextComic+"/info.0.json"      trace(url+'\n')    }    let message = new Message(url);    message.method = "GET";    message.invoke(Message.TEXT).then(text => {      if (0 == message.error && 200 == message.status) {          try {            /*** YOUR CODE HERE ***/            trace("hello" + '\n');            var obj=JSON.parse(text);            trace(obj.month + '\n');            let comicPic = new  Picture({height: 150, url: obj.img});            currentComic= obj.num;            application.add(comicPic);            let details= new Label({ left: 0, right: 0, top: 200, bottom: 0, string: obj.title, style: smallStyle,skin:whiteSkin})            let leftArrow = new Label({left:0, right:250, top:0, bottom:225, string: "Previous",skin:blueSkin,active:true, style:smallWhiteStyle,                    behavior: Behavior({              onTouchEnded(container, id, x, y, ticks) {                getLeftImg();              }            })})            let rightArrow = new Label({left:250, right:0, top:0, bottom:225, string: "Next",skin:blueSkin,active:true, style:smallWhiteStyle,                    behavior: Behavior({              onTouchEnded(container, id, x, y, ticks) {                getRightImg();              }            })})            application.add(leftArrow);            application.add(rightArrow);            application.add(details);            var searchParams= urlString(obj.title)            getFlickrImg(searchParams);          }          catch (e) {            throw('Web service responded with invalid JSON!\n');          }      }      else {          trace('Request Failed - Raw Response Body: *'+text+'*'+'\n');      }    });}function getFlickrImg(title){  // var title = "food+and+my+nation"  var url = "https://api.flickr.com/services/rest/?method=flickr.photos.search&text="+title+"&api_key=ec056b70492ea21b397ced4b6d2b93c9&format=json&nojsoncallback=1"  trace(url+'\n')  trace(title+'\n')  let message = new Message(url);  message.method = "GET";  message.invoke(Message.TEXT).then(text => {    if (0 == message.error && 200 == message.status) {        try {          /*** YOUR CODE HERE ***/          trace("hello flickr" + '\n');          trace(text+'\n');          var obj=JSON.parse(text);          trace(obj.photos.photo[0].id+'\n')          var photoId= obj.photos.photo[0].id          var photoUrl="https://api.flickr.com/services/rest/?method=flickr.photos.getSizes&photo_id="+photoId+"&api_key=ec056b70492ea21b397ced4b6d2b93c9&format=json&nojsoncallback=1"          let photoMessage = new Message(photoUrl)          photoMessage.method="GET"          photoMessage.invoke(Message.TEXT).then(text=>{            if (0 == message.error && 200 == message.status) {              try {                  /*** YOUR CODE HERE ***/                  var json=JSON.parse(text);                  trace(json+'\n')                  trace(json.sizes.size[8].source+'\n')                  var imgSrc = json.sizes.size[8].source;                  let rightPic = new Picture({left:250,top:200,bottom:0,right:0,width:512,height: 512,aspect: "fill", url: imgSrc})                  let leftPic = new Picture({left:0,top:200,bottom:0,right:250,width:512,height: 512,aspect: "fill", url: imgSrc})                  application.add(leftPic);                  application.add(rightPic);              }              catch (e) {                throw('Web service responded with invalid JSON!\n');              }            }            else {                trace('Request Failed - Raw Response Body: *'+text+'*'+'\n');            }          })        }        catch (e) {          throw('Web service responded with invalid JSON!\n');        }    }    else {        trace('Request Failed - Raw Response Body: *'+text+'*'+'\n');    }  });}function urlString(myString){  var words = myString.match(/[a-zA-Z]+/g);  // var words = myString.split(" ");  trace(words+'\n')  var s=""  for (var i = 0; i < words.length; i++) {    // Iterate over numeric indexes from 0 to 5, as everyone expects.    s+= words[i]+"+"  }  trace("strinsplitter:"+s+'\n')  return s.slice(0,-1);}/* Application definition */let mainContainer = new MainContainer();application.add(mainContainer);